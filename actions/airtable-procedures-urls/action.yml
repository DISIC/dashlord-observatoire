name: "Get Airtable procedures URLs to scan"
description: "Rapatrier les URLs des démarches via Airtable pour préparer le scan"

inputs:
  airtable_api_key:
    description: "Clé API Airtable"
    required: true
  airtable_base_id:
    description: "Identifiant de la base Airtable"
    required: true
  airtable_procedures_table_name:
    description: "Nom de la table Airtable des démarches"
    required: true
  airtable_editions_table_name:
    description: "Nom de la table Airtable des éditions"
    required: true
  output:
    description: "Path to output file. defaults to airtable-procedures_urls.json"
    default: "airtable-procedures_urls.json"
    required: true
outputs:
  urls:
    description: "List of procedures urls separated by comma"
    value: ${{ steps.airtable_urls.outputs.urls }}
  json:
    description: "List of procedures in json with ids & urls"
    value: ${{ steps.airtable_urls.outputs.json }}

runs:
  using: "composite"
  steps:
    - name: Install
      shell: bash
      run: |
        cd ${{ github.action_path }}
        yarn
    - id: airtable_urls
      name: Get Airtable procedures URLs and IDs
      shell: bash
      run: |
        cd ${{ github.action_path }}
        JSON_PROCEDURES=$(node index ${{ inputs.airtable_api_key }} ${{ inputs.airtable_base_id }} ${{ inputs.airtable_procedures_table_name }} ${{ inputs.airtable_editions_table_name }} | tr '\n' ' ')
        echo $JSON_PROCEDURES > ${{ inputs.output }}
        echo "json=$JSON_PROCEDURES" >> $GITHUB_OUTPUT
        STRING_URLS=$(cat ${{ inputs.output }} | python3 -c "import sys, json; data = json.load(sys.stdin); print(','.join(list(map(lambda d : d['link'], data))));")
        echo "urls=$STRING_URLS" >> $GITHUB_OUTPUT
